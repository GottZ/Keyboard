
KeyboadC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000a78  00000b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00800064  00800064  00000b10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000162f  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a54  00000000  00000000  0000226f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012aa  00000000  00000000  00002cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00003f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a7  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3e  00000000  00000000  0000487f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000055bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
   2:	02 c1       	rjmp	.+516    	; 0x208 <__vector_1>
   4:	e7 c0       	rjmp	.+462    	; 0x1d4 <__bad_interrupt>
   6:	e6 c0       	rjmp	.+460    	; 0x1d4 <__bad_interrupt>
   8:	e5 c0       	rjmp	.+458    	; 0x1d4 <__bad_interrupt>
   a:	e4 c0       	rjmp	.+456    	; 0x1d4 <__bad_interrupt>
   c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__bad_interrupt>
   e:	e2 c0       	rjmp	.+452    	; 0x1d4 <__bad_interrupt>
  10:	e1 c0       	rjmp	.+450    	; 0x1d4 <__bad_interrupt>
  12:	e0 c0       	rjmp	.+448    	; 0x1d4 <__bad_interrupt>
  14:	df c0       	rjmp	.+446    	; 0x1d4 <__bad_interrupt>
  16:	de c0       	rjmp	.+444    	; 0x1d4 <__bad_interrupt>
  18:	dd c0       	rjmp	.+442    	; 0x1d4 <__bad_interrupt>
  1a:	dc c0       	rjmp	.+440    	; 0x1d4 <__bad_interrupt>
  1c:	db c0       	rjmp	.+438    	; 0x1d4 <__bad_interrupt>
  1e:	da c0       	rjmp	.+436    	; 0x1d4 <__bad_interrupt>
  20:	d9 c0       	rjmp	.+434    	; 0x1d4 <__bad_interrupt>
  22:	d8 c0       	rjmp	.+432    	; 0x1d4 <__bad_interrupt>
  24:	d7 c0       	rjmp	.+430    	; 0x1d4 <__bad_interrupt>
  26:	94 c3       	rjmp	.+1832   	; 0x750 <main+0x136>
  28:	97 c3       	rjmp	.+1838   	; 0x758 <main+0x13e>
  2a:	9a c3       	rjmp	.+1844   	; 0x760 <main+0x146>
  2c:	9d c3       	rjmp	.+1850   	; 0x768 <main+0x14e>
  2e:	a0 c3       	rjmp	.+1856   	; 0x770 <main+0x156>
  30:	a3 c3       	rjmp	.+1862   	; 0x778 <main+0x15e>
  32:	a6 c3       	rjmp	.+1868   	; 0x780 <main+0x166>
  34:	a9 c3       	rjmp	.+1874   	; 0x788 <main+0x16e>
  36:	ac c3       	rjmp	.+1880   	; 0x790 <main+0x176>
  38:	af c3       	rjmp	.+1886   	; 0x798 <main+0x17e>
  3a:	b1 c3       	rjmp	.+1890   	; 0x79e <main+0x184>
  3c:	b3 c3       	rjmp	.+1894   	; 0x7a4 <main+0x18a>

0000003e <__trampolines_end>:
  3e:	05 01       	movw	r0, r10
  40:	09 02       	muls	r16, r25
  42:	a1 01       	movw	r20, r2
  44:	09 01       	movw	r0, r18
  46:	a1 00       	.word	0x00a1	; ????
  48:	85 01       	movw	r16, r10
  4a:	05 09       	sbc	r16, r5
  4c:	19 01       	movw	r2, r18
  4e:	29 03       	fmul	r18, r17
  50:	15 00       	.word	0x0015	; ????
  52:	25 01       	movw	r4, r10
  54:	95 03       	fmuls	r17, r21
  56:	75 01       	movw	r14, r10
  58:	81 02       	muls	r24, r17
  5a:	95 01       	movw	r18, r10
  5c:	75 05       	cpc	r23, r5
  5e:	81 03       	fmuls	r16, r17
  60:	05 01       	movw	r0, r10
  62:	09 30       	cpi	r16, 0x09	; 9
  64:	09 31       	cpi	r16, 0x19	; 25
  66:	15 81       	ldd	r17, Z+5	; 0x05
  68:	25 7f       	andi	r18, 0xF5	; 245
  6a:	75 08       	sbc	r7, r5
  6c:	95 02       	muls	r25, r21
  6e:	81 06       	cpc	r8, r17
  70:	c0 c0       	rjmp	.+384    	; 0x1f2 <usbCrcBitLoop+0x6>
  72:	05 01       	movw	r0, r10
  74:	09 06       	cpc	r0, r25
  76:	a1 01       	movw	r20, r2
  78:	85 02       	muls	r24, r21
  7a:	75 01       	movw	r14, r10
  7c:	95 08       	sbc	r9, r5
  7e:	05 07       	cpc	r16, r21
  80:	19 e0       	ldi	r17, 0x09	; 9
  82:	29 e7       	ldi	r18, 0x79	; 121
  84:	15 00       	.word	0x0015	; ????
  86:	25 01       	movw	r4, r10
  88:	81 02       	muls	r24, r17
  8a:	95 01       	movw	r18, r10
  8c:	75 08       	sbc	r7, r5
  8e:	81 03       	fmuls	r16, r17
  90:	95 05       	cpc	r25, r5
  92:	75 01       	movw	r14, r10
  94:	05 08       	sbc	r0, r5
  96:	19 01       	movw	r2, r18
  98:	29 05       	cpc	r18, r9
  9a:	91 02       	muls	r25, r17
  9c:	95 01       	movw	r18, r10
  9e:	75 03       	mulsu	r23, r21
  a0:	91 03       	fmuls	r17, r17
  a2:	95 05       	cpc	r25, r5
  a4:	75 08       	sbc	r7, r5
  a6:	15 00       	.word	0x0015	; ????
  a8:	26 a4       	ldd	r2, Z+46	; 0x2e
  aa:	00 05       	cpc	r16, r0
  ac:	07 19       	sub	r16, r7
  ae:	00 2a       	or	r0, r16
  b0:	a4 00       	.word	0x00a4	; ????
  b2:	81 00       	.word	0x0081	; ????
  b4:	c0 05       	cpc	r28, r0
  b6:	0c 09       	sbc	r16, r12
  b8:	01 a1       	ldd	r16, Z+33	; 0x21
  ba:	01 85       	ldd	r16, Z+9	; 0x09
  bc:	03 19       	sub	r16, r3
  be:	00 2a       	or	r0, r16
  c0:	3c 02       	muls	r19, r28
  c2:	15 00       	.word	0x0015	; ????
  c4:	26 3c       	cpi	r18, 0xC6	; 198
  c6:	02 95       	swap	r16
  c8:	01 75       	andi	r16, 0x51	; 81
  ca:	10 81       	ld	r17, Z
  cc:	00 c0       	rjmp	.+0      	; 0xce <__SREG__+0x8f>
  ce:	05 01       	movw	r0, r10
  d0:	09 80       	ldd	r0, Y+1	; 0x01
  d2:	a1 01       	movw	r20, r2
  d4:	85 04       	cpc	r8, r5
  d6:	95 01       	movw	r18, r10
  d8:	75 02       	muls	r23, r21
  da:	15 01       	movw	r2, r10
  dc:	25 03       	mulsu	r18, r21
  de:	09 82       	std	Y+1, r0	; 0x01
  e0:	09 81       	ldd	r16, Y+1	; 0x01
  e2:	09 83       	std	Y+1, r16	; 0x01
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	75 06       	cpc	r7, r21
  e8:	81 03       	fmuls	r16, r17
  ea:	c0 09       	Address 0x000000ea is out of bounds.
.word	0xffff	; ????

000000eb <usbDescriptorConfiguration>:
  eb:	09 02 22 00 01 01 00 a0 32 09 04 00 00 01 03 01     ..".....2.......
  fb:	01 00 09 21 01 01 00 01 22 ad 00 07 05 81 03 08     ...!....".......
 10b:	00 0a                                               ..

0000010d <usbDescriptorDevice>:
 10d:	12 01 10 01 00 00 00 08 42 42 be ba 98 01 01 02     ........BB......
 11d:	03 01                                               ..

0000011f <usbDescriptorStringSerialNumber>:
 11f:	06 03 34 00 32 00                                   ..4.2.

00000125 <usbDescriptorStringDevice>:
 125:	3a 03 50 00 52 00 30 00 42 00 30 00 41 00 52 00     :.P.R.0.B.0.A.R.
 135:	44 00 2d 00 52 00 69 00 70 00 70 00 65 00 72 00     D.-.R.i.p.p.e.r.
 145:	31 00 32 00 31 00 40 00 67 00 6d 00 61 00 69 00     1.2.1.@.g.m.a.i.
 155:	6c 00 2e 00 63 00 6f 00 6d 00                       l...c.o.m.

0000015f <usbDescriptorStringVendor>:
 15f:	3a 03 50 00 52 00 30 00 42 00 30 00 41 00 52 00     :.P.R.0.B.0.A.R.
 16f:	44 00 2d 00 52 00 69 00 70 00 70 00 65 00 72 00     D.-.R.i.p.p.e.r.
 17f:	31 00 32 00 31 00 40 00 67 00 6d 00 61 00 69 00     1.2.1.@.g.m.a.i.
 18f:	6c 00 2e 00 63 00 6f 00 6d 00                       l...c.o.m.

00000199 <usbDescriptorString0>:
 199:	04 03 09 04 00                                      .....

0000019e <__ctors_end>:
 19e:	11 24       	eor	r1, r1
 1a0:	1f be       	out	0x3f, r1	; 63
 1a2:	cf e5       	ldi	r28, 0x5F	; 95
 1a4:	d4 e0       	ldi	r29, 0x04	; 4
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	a0 e6       	ldi	r26, 0x60	; 96
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e8 e7       	ldi	r30, 0x78	; 120
 1b2:	fa e0       	ldi	r31, 0x0A	; 10
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
 1b6:	05 90       	lpm	r0, Z+
 1b8:	0d 92       	st	X+, r0
 1ba:	a4 36       	cpi	r26, 0x64	; 100
 1bc:	b1 07       	cpc	r27, r17
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	a4 e6       	ldi	r26, 0x64	; 100
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
 1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
 1ca:	a5 3a       	cpi	r26, 0xA5	; 165
 1cc:	b2 07       	cpc	r27, r18
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
 1d0:	24 d2       	rcall	.+1096   	; 0x61a <main>
 1d2:	50 c4       	rjmp	.+2208   	; 0xa74 <_exit>

000001d4 <__bad_interrupt>:
 1d4:	15 cf       	rjmp	.-470    	; 0x0 <__vectors>

000001d6 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 1d6:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 1d8:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 1de:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 1e0:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 1e2:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 1e4:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <usbCrcLoopEntry>

000001e8 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 1e8:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 1ea:	82 27       	eor	r24, r18

000001ec <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 1ec:	97 95       	ror	r25
    ror     resCrcL
 1ee:	87 95       	ror	r24
    brcs    usbCrcNoXor
 1f0:	10 f0       	brcs	.+4      	; 0x1f6 <usbCrcNoXor>
    eor     resCrcL, polyL
 1f2:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 1f4:	95 27       	eor	r25, r21

000001f6 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 1f6:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 1f8:	c8 f3       	brcs	.-14     	; 0x1ec <usbCrcBitLoop>

000001fa <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 1fa:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 1fc:	a8 f3       	brcs	.-22     	; 0x1e8 <usbCrcByteLoop>

000001fe <usbCrcReady>:
usbCrcReady:
    ret
 1fe:	08 95       	ret

00000200 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 200:	ea df       	rcall	.-44     	; 0x1d6 <usbCrc16>
    st      ptr+, resCrcL
 202:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 204:	9d 93       	st	X+, r25
    ret
 206:	08 95       	ret

00000208 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 208:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 20a:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 20c:	cf 93       	push	r28

0000020e <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 20e:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 210:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
 212:	e9 f7       	brne	.-6      	; 0x20e <waitForJ>

00000214 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 214:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 216:	09 c0       	rjmp	.+18     	; 0x22a <foundK>
    sbis    USBIN, USBMINUS
 218:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 21a:	07 c0       	rjmp	.+14     	; 0x22a <foundK>
    sbis    USBIN, USBMINUS
 21c:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 21e:	05 c0       	rjmp	.+10     	; 0x22a <foundK>
    sbis    USBIN, USBMINUS
 220:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 222:	03 c0       	rjmp	.+6      	; 0x22a <foundK>
    sbis    USBIN, USBMINUS
 224:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 226:	01 c0       	rjmp	.+2      	; 0x22a <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 228:	a3 c0       	rjmp	.+326    	; 0x370 <sofError>

0000022a <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 22a:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 22c:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <usbInputBufOffset>
    clr     YH                  ;1 [5]
 230:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 232:	c1 57       	subi	r28, 0x71	; 113
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 234:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 236:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK    ;2 [10]
 238:	02 c0       	rjmp	.+4      	; 0x23e <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 23a:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 23c:	eb cf       	rjmp	.-42     	; 0x214 <waitForK>

0000023e <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 23e:	2f 93       	push	r18
    push    x1              ;2 [12]
 240:	0f 93       	push	r16
    push    x2              ;2 [14]
 242:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 244:	06 b3       	in	r16, 0x16	; 22
    ldi     shift, 0xff     ;1 [18]
 246:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 248:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
 24a:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 24c:	4f 93       	push	r20
    push    cnt             ;2 [24]
 24e:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 250:	16 b3       	in	r17, 0x16	; 22
    ser     x3              ;1 [26] [inserted init instruction]
 252:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 254:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 256:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
 258:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 25a:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 25c:	31 c0       	rjmp	.+98     	; 0x2c0 <rxbit2>

0000025e <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 25e:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 260:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 262:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x01 ;1 [18]
 264:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 266:	28 c0       	rjmp	.+80     	; 0x2b8 <didUnstuff0>

00000268 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 268:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 26a:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 26c:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 26e:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 270:	06 b3       	in	r16, 0x16	; 22
    rjmp    didUnstuff1 ;2 [27]
 272:	29 c0       	rjmp	.+82     	; 0x2c6 <didUnstuff1>

00000274 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 274:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 276:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 278:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 27a:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 27c:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff2 ;2 [35]
 27e:	2b c0       	rjmp	.+86     	; 0x2d6 <didUnstuff2>

00000280 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 280:	16 b3       	in	r17, 0x16	; 22
    andi    x3, ~0x08   ;1 [35]
 282:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 284:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 286:	2a c0       	rjmp	.+84     	; 0x2dc <didUnstuff3>

00000288 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 288:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 28a:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10 ;1 [42]
 28c:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 28e:	2c c0       	rjmp	.+88     	; 0x2e8 <didUnstuff4>

00000290 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 290:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 292:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x20 ;1 [50]
 294:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 296:	2f c0       	rjmp	.+94     	; 0x2f6 <didUnstuff5>

00000298 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 298:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 29a:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40 ;1 [58]
 29c:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 29e:	32 c0       	rjmp	.+100    	; 0x304 <didUnstuff6>

000002a0 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 2a0:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 2a2:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3      ;2 [3] store data
 2a4:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 2a6:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 2a8:	00 00       	nop
    eor     x2, x1      ;1 [6]
 2aa:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 2ac:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
 2ae:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 2b0:	16 b3       	in	r17, 0x16	; 22
    andi    x2, USBMASK ;1 [10]
 2b2:	13 70       	andi	r17, 0x03	; 3
    breq    se0         ;1 [11] SE0 check for bit 1
 2b4:	c9 f1       	breq	.+114    	; 0x328 <se0>
    andi    shift, 0xf9 ;1 [12]
 2b6:	29 7f       	andi	r18, 0xF9	; 249

000002b8 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 2b8:	91 f2       	breq	.-92     	; 0x25e <unstuff0>
    eor     x1, x2      ;1 [14]
 2ba:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 2bc:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
 2be:	21 f9       	bld	r18, 1

000002c0 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 2c0:	06 b3       	in	r16, 0x16	; 22
    andi    shift, 0xf3 ;1 [18]
 2c2:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 2c4:	89 f2       	breq	.-94     	; 0x268 <unstuff1>

000002c6 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 2c6:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 2c8:	58 f1       	brcs	.+86     	; 0x320 <overflow>
    eor     x2, x1      ;1 [22]
 2ca:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 2cc:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
 2ce:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 2d0:	16 b3       	in	r17, 0x16	; 22
    andi    shift, 0xe7 ;1 [26]
 2d2:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 2d4:	79 f2       	breq	.-98     	; 0x274 <unstuff2>

000002d6 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 2d6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 2d8:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
 2da:	23 f9       	bld	r18, 3

000002dc <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 2dc:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 2de:	81 f2       	breq	.-96     	; 0x280 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 2e0:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [34]
 2e2:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 2e4:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
 2e6:	24 f9       	bld	r18, 4

000002e8 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 2e8:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 2ea:	71 f2       	breq	.-100    	; 0x288 <unstuff4>
    nop2                ;2 [40]
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 2ee:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [42]
 2f0:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 2f2:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
 2f4:	25 f9       	bld	r18, 5

000002f6 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 2f6:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 2f8:	59 f2       	breq	.-106    	; 0x290 <unstuff5>
    nop2                ;2 [48]
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 2fc:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [50]
 2fe:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 300:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
 302:	26 f9       	bld	r18, 6

00000304 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 304:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 306:	40 f2       	brcs	.-112    	; 0x298 <unstuff6>
    nop2                ;2 [56]
 308:	00 c0       	rjmp	.+0      	; 0x30a <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 30a:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [58]
 30c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 30e:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
 310:	27 f9       	bld	r18, 7

00000312 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 312:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 314:	28 f6       	brcc	.-118    	; 0x2a0 <rxLoop>

00000316 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 316:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 318:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 31a:	16 b3       	in	r17, 0x16	; 22
    nop                 ;1 [66]
 31c:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 31e:	f9 cf       	rjmp	.-14     	; 0x312 <didUnstuff7>

00000320 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 320:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 322:	1a bf       	out	0x3a, r17	; 58

00000324 <ignorePacket>:
ignorePacket:
    clr     token
 324:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 326:	19 c0       	rjmp	.+50     	; 0x35a <handleSetupOrOut>

00000328 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 328:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 32a:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 32c:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 32e:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 330:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 332:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 334:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 336:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 338:	f9 f0       	breq	.+62     	; 0x378 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 33a:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 33c:	e9 f0       	breq	.+58     	; 0x378 <handleData>
    lds     shift, usbDeviceAddr;[17]
 33e:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 342:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 344:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 346:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 348:	ed cf       	rjmp	.-38     	; 0x324 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 34a:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 34c:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 34e:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 350:	41 f1       	breq	.+80     	; 0x3a2 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 352:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 354:	11 f0       	breq	.+4      	; 0x35a <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 356:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 358:	29 f7       	brne	.-54     	; 0x324 <ignorePacket>

0000035a <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 35a:	00 93 8d 00 	sts	0x008D, r16	; 0x80008d <usbCurrentTok>

0000035e <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 35e:	3f 91       	pop	r19
 360:	4f 91       	pop	r20
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	2f 91       	pop	r18
 368:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 36a:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 36c:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 36e:	4f cf       	rjmp	.-354    	; 0x20e <waitForJ>

00000370 <sofError>:
sofError:
    POP_RETI                    ;macro call
 370:	cf 91       	pop	r28
 372:	cf bf       	out	0x3f, r28	; 63
 374:	cf 91       	pop	r28
    reti
 376:	18 95       	reti

00000378 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 378:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <usbCurrentTok>
    tst     shift               ;[20]
 37c:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 37e:	79 f3       	breq	.-34     	; 0x35e <doReturn>
    lds     x2, usbRxLen        ;[22]
 380:	10 91 8b 00 	lds	r17, 0x008B	; 0x80008b <usbRxLen>
    tst     x2                  ;[24]
 384:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 386:	69 f5       	brne	.+90     	; 0x3e2 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 388:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 38a:	6a f1       	brmi	.+90     	; 0x3e6 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 38c:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 390:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 394:	10 91 88 00 	lds	r17, 0x0088	; 0x800088 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 398:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 39a:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 39c:	30 93 88 00 	sts	0x0088, r19	; 0x800088 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 3a0:	22 c0       	rjmp	.+68     	; 0x3e6 <sendAckAndReti>

000003a2 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 3a2:	00 91 8b 00 	lds	r16, 0x008B	; 0x80008b <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 3a6:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 3a8:	e4 f4       	brge	.+56     	; 0x3e2 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 3aa:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 3ac:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 3ae:	49 f4       	brne	.+18     	; 0x3c2 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 3b0:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 3b4:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 3b6:	19 c0       	rjmp	.+50     	; 0x3ea <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 3b8:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 3bc:	ce e6       	ldi	r28, 0x6E	; 110
    ldi     YH, hi8(usbTxBuf)   ;[44]
 3be:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 3c0:	18 c0       	rjmp	.+48     	; 0x3f2 <usbSendAndReti>

000003c2 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 3c2:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 3c6:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 3c8:	10 c0       	rjmp	.+32     	; 0x3ea <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 3ca:	00 93 79 00 	sts	0x0079, r16	; 0x800079 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 3ce:	ca e7       	ldi	r28, 0x7A	; 122
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 3d2:	0f c0       	rjmp	.+30     	; 0x3f2 <usbSendAndReti>

000003d4 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 3d4:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 3d6:	a8 f4       	brcc	.+42     	; 0x402 <doExorN1>
    subi    x4, 1               ;[-3]
 3d8:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 3da:	a9 f4       	brne	.+42     	; 0x406 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 3dc:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 3de:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 3e0:	f9 cf       	rjmp	.-14     	; 0x3d4 <stuffN1Delay>

000003e2 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 3e2:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <usbSendX3>

000003e6 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 3e6:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <usbSendX3>

000003ea <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 3ea:	43 2f       	mov	r20, r19

000003ec <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 3ec:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 3f0:	32 e0       	ldi	r19, 0x02	; 2

000003f2 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 3f2:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK         ;[-11]
 3f4:	13 60       	ori	r17, 0x03	; 3
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 3f6:	c0 9a       	sbi	0x18, 0	; 24
    out     USBDDR, x2          ;[-8] <--- acquire bus
 3f8:	17 bb       	out	0x17, r17	; 23
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 3fa:	08 b3       	in	r16, 0x18	; 24
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 3fc:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 3fe:	13 e0       	ldi	r17, 0x03	; 3
    push    x4                  ;[-4]
 400:	5f 93       	push	r21

00000402 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 402:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 404:	56 e0       	ldi	r21, 0x06	; 6

00000406 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 406:	08 bb       	out	0x18, r16	; 24
    ror     shift               ;[01]
 408:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 40a:	20 f4       	brcc	.+8      	; 0x414 <doExorN2>
    subi    x4, 1               ;[03]
 40c:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 40e:	21 f4       	brne	.+8      	; 0x418 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 410:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 412:	f9 cf       	rjmp	.-14     	; 0x406 <commonN1>

00000414 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 414:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 416:	56 e0       	ldi	r21, 0x06	; 6

00000418 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 418:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 41a:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 41c:	08 bb       	out	0x18, r16	; 24
    brcs    txBitloop           ;[09]      [25] [41]
 41e:	d0 f2       	brcs	.-76     	; 0x3d4 <stuffN1Delay>

00000420 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 420:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 422:	28 f4       	brcc	.+10     	; 0x42e <doExor6>
    subi    x4, 1               ;[44]
 424:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 426:	29 f4       	brne	.+10     	; 0x432 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 428:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 42a:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 42c:	f9 cf       	rjmp	.-14     	; 0x420 <stuff6Delay>

0000042e <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 42e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 430:	56 e0       	ldi	r21, 0x06	; 6

00000432 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 432:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 434:	08 bb       	out	0x18, r16	; 24
    brcc    doExor7             ;[49]
 436:	20 f4       	brcc	.+8      	; 0x440 <doExor7>
    subi    x4, 1               ;[50]
 438:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 43a:	21 f4       	brne	.+8      	; 0x444 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 43c:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 43e:	f9 cf       	rjmp	.-14     	; 0x432 <common6>

00000440 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 440:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 442:	56 e0       	ldi	r21, 0x06	; 6

00000444 <common7>:
common7:
    ld      shift, y+           ;[53]
 444:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 446:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 448:	08 bb       	out	0x18, r16	; 24
    brne    txByteLoop          ;[57]
 44a:	21 f6       	brne	.-120    	; 0x3d4 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 44c:	0c 7f       	andi	r16, 0xFC	; 252
    lds     x2, usbNewDeviceAddr;[59]
 44e:	10 91 8c 00 	lds	r17, 0x008C	; 0x80008c <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 452:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 454:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 456:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 458:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 45a:	11 f0       	breq	.+4      	; 0x460 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 45c:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <usbDeviceAddr>

00000460 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 460:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 462:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 464:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
 466:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK         ;[07] set both pins to input
 468:	1c 7f       	andi	r17, 0xFC	; 252
    mov     x3, x1              ;[08]
 46a:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 46c:	4c 7f       	andi	r20, 0xFC	; 252
    pop     x4                  ;[10]
 46e:	5f 91       	pop	r21
    nop2                        ;[12]
 470:	00 c0       	rjmp	.+0      	; 0x472 <skipAddrAssign+0x12>
    nop2                        ;[14]
 472:	00 c0       	rjmp	.+0      	; 0x474 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 474:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2          ;[17] <-- release bus now
 476:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 478:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
 47a:	71 cf       	rjmp	.-286    	; 0x35e <doReturn>

0000047c <resetMatrix>:
}

char isConnected()
{
	return usb_hasCommed;
}
 47c:	a2 98       	cbi	0x14, 2	; 20
 47e:	aa 98       	cbi	0x15, 2	; 21
 480:	a3 98       	cbi	0x14, 3	; 20
 482:	ab 98       	cbi	0x15, 3	; 21
 484:	a4 98       	cbi	0x14, 4	; 20
 486:	ac 98       	cbi	0x15, 4	; 21
 488:	a5 98       	cbi	0x14, 5	; 20
 48a:	ad 98       	cbi	0x15, 5	; 21
 48c:	88 98       	cbi	0x11, 0	; 17
 48e:	90 98       	cbi	0x12, 0	; 18
 490:	89 98       	cbi	0x11, 1	; 17
 492:	91 98       	cbi	0x12, 1	; 18
 494:	08 95       	ret

00000496 <usbBegin>:
 496:	f8 94       	cli
 498:	88 b3       	in	r24, 0x18	; 24
 49a:	8c 7f       	andi	r24, 0xFC	; 252
 49c:	88 bb       	out	0x18, r24	; 24
 49e:	b8 9a       	sbi	0x17, 0	; 23
 4a0:	2f eb       	ldi	r18, 0xBF	; 191
 4a2:	87 e2       	ldi	r24, 0x27	; 39
 4a4:	99 e0       	ldi	r25, 0x09	; 9
 4a6:	21 50       	subi	r18, 0x01	; 1
 4a8:	80 40       	sbci	r24, 0x00	; 0
 4aa:	90 40       	sbci	r25, 0x00	; 0
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <usbBegin+0x10>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <usbBegin+0x1a>
 4b0:	00 00       	nop
 4b2:	b8 98       	cbi	0x17, 0	; 23
 4b4:	d2 d2       	rcall	.+1444   	; 0xa5a <usbInit>
 4b6:	78 94       	sei
 4b8:	08 95       	ret

000004ba <usbReportSend>:
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	18 2f       	mov	r17, r24
 4c2:	c9 e7       	ldi	r28, 0x79	; 121
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
 4c6:	9e d1       	rcall	.+828    	; 0x804 <usbPoll>
 4c8:	88 81       	ld	r24, Y
 4ca:	84 ff       	sbrs	r24, 4
 4cc:	fc cf       	rjmp	.-8      	; 0x4c6 <usbReportSend+0xc>
 4ce:	61 2f       	mov	r22, r17
 4d0:	86 e6       	ldi	r24, 0x66	; 102
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	74 d1       	rcall	.+744    	; 0x7be <usbSetInterrupt>
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	08 95       	ret

000004de <usbFunctionSetup>:
 4de:	fc 01       	movw	r30, r24
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <usb_hasCommed>
 4e6:	90 81       	ld	r25, Z
 4e8:	90 76       	andi	r25, 0x60	; 96
 4ea:	90 32       	cpi	r25, 0x20	; 32
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <usbFunctionSetup+0x12>
 4ee:	5b c0       	rjmp	.+182    	; 0x5a6 <usbFunctionSetup+0xc8>
 4f0:	81 81       	ldd	r24, Z+1	; 0x01
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	d9 f0       	breq	.+54     	; 0x52c <usbFunctionSetup+0x4e>
 4f6:	28 f4       	brcc	.+10     	; 0x502 <usbFunctionSetup+0x24>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	29 f1       	breq	.+74     	; 0x546 <usbFunctionSetup+0x68>
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	49 f0       	breq	.+18     	; 0x512 <usbFunctionSetup+0x34>
 500:	54 c0       	rjmp	.+168    	; 0x5aa <usbFunctionSetup+0xcc>
 502:	8a 30       	cpi	r24, 0x0A	; 10
 504:	71 f0       	breq	.+28     	; 0x522 <usbFunctionSetup+0x44>
 506:	8b 30       	cpi	r24, 0x0B	; 11
 508:	c9 f0       	breq	.+50     	; 0x53c <usbFunctionSetup+0x5e>
 50a:	89 30       	cpi	r24, 0x09	; 9
 50c:	09 f0       	breq	.+2      	; 0x510 <usbFunctionSetup+0x32>
 50e:	4d c0       	rjmp	.+154    	; 0x5aa <usbFunctionSetup+0xcc>
 510:	41 c0       	rjmp	.+130    	; 0x594 <usbFunctionSetup+0xb6>
 512:	80 e6       	ldi	r24, 0x60	; 96
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 51a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	08 95       	ret
 522:	83 81       	ldd	r24, Z+3	; 0x03
 524:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
 52c:	84 e6       	ldi	r24, 0x64	; 100
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 534:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	08 95       	ret
 53c:	83 81       	ldd	r24, Z+3	; 0x03
 53e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	08 95       	ret
 546:	a6 e6       	ldi	r26, 0x66	; 102
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	b0 93 8a 00 	sts	0x008A, r27	; 0x80008a <usbMsgPtr+0x1>
 54e:	a0 93 89 00 	sts	0x0089, r26	; 0x800089 <usbMsgPtr>
 552:	82 81       	ldd	r24, Z+2	; 0x02
 554:	8c 93       	st	X, r24
 556:	17 96       	adiw	r26, 0x07	; 7
 558:	1c 92       	st	X, r1
 55a:	17 97       	sbiw	r26, 0x07	; 7
 55c:	16 96       	adiw	r26, 0x06	; 6
 55e:	1c 92       	st	X, r1
 560:	16 97       	sbiw	r26, 0x06	; 6
 562:	15 96       	adiw	r26, 0x05	; 5
 564:	1c 92       	st	X, r1
 566:	15 97       	sbiw	r26, 0x05	; 5
 568:	14 96       	adiw	r26, 0x04	; 4
 56a:	1c 92       	st	X, r1
 56c:	14 97       	sbiw	r26, 0x04	; 4
 56e:	13 96       	adiw	r26, 0x03	; 3
 570:	1c 92       	st	X, r1
 572:	13 97       	sbiw	r26, 0x03	; 3
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	1c 92       	st	X, r1
 578:	12 97       	sbiw	r26, 0x02	; 2
 57a:	11 96       	adiw	r26, 0x01	; 1
 57c:	1c 92       	st	X, r1
 57e:	82 81       	ldd	r24, Z+2	; 0x02
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	a9 f0       	breq	.+42     	; 0x5ae <usbFunctionSetup+0xd0>
 584:	82 30       	cpi	r24, 0x02	; 2
 586:	a9 f0       	breq	.+42     	; 0x5b2 <usbFunctionSetup+0xd4>
 588:	83 30       	cpi	r24, 0x03	; 3
 58a:	b1 f0       	breq	.+44     	; 0x5b8 <usbFunctionSetup+0xda>
 58c:	84 30       	cpi	r24, 0x04	; 4
 58e:	99 f0       	breq	.+38     	; 0x5b6 <usbFunctionSetup+0xd8>
 590:	88 e0       	ldi	r24, 0x08	; 8
 592:	08 95       	ret
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	26 81       	ldd	r18, Z+6	; 0x06
 598:	37 81       	ldd	r19, Z+7	; 0x07
 59a:	22 30       	cpi	r18, 0x02	; 2
 59c:	31 05       	cpc	r19, r1
 59e:	09 f0       	breq	.+2      	; 0x5a2 <usbFunctionSetup+0xc4>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	81 95       	neg	r24
 5a4:	08 95       	ret
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	08 95       	ret
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	08 95       	ret
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	08 95       	ret
 5b2:	88 e0       	ldi	r24, 0x08	; 8
 5b4:	08 95       	ret
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	08 95       	ret

000005ba <pressKey5>:
 5ba:	ef 92       	push	r14
 5bc:	0f 93       	push	r16
 5be:	e6 e6       	ldi	r30, 0x66	; 102
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	81 83       	std	Z+1, r24	; 0x01
 5c4:	12 82       	std	Z+2, r1	; 0x02
 5c6:	63 83       	std	Z+3, r22	; 0x03
 5c8:	44 83       	std	Z+4, r20	; 0x04
 5ca:	25 83       	std	Z+5, r18	; 0x05
 5cc:	06 83       	std	Z+6, r16	; 0x06
 5ce:	e7 82       	std	Z+7, r14	; 0x07
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	80 83       	st	Z, r24
 5d4:	88 e0       	ldi	r24, 0x08	; 8
 5d6:	71 df       	rcall	.-286    	; 0x4ba <usbReportSend>
 5d8:	0f 91       	pop	r16
 5da:	ef 90       	pop	r14
 5dc:	08 95       	ret

000005de <pressKey1>:
 5de:	ef 92       	push	r14
 5e0:	0f 93       	push	r16
 5e2:	e1 2c       	mov	r14, r1
 5e4:	00 e0       	ldi	r16, 0x00	; 0
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	40 e0       	ldi	r20, 0x00	; 0
 5ea:	e7 df       	rcall	.-50     	; 0x5ba <pressKey5>
 5ec:	0f 91       	pop	r16
 5ee:	ef 90       	pop	r14
 5f0:	08 95       	ret

000005f2 <pressMultimediaKey>:
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	c6 e6       	ldi	r28, 0x66	; 102
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
 5fc:	13 e0       	ldi	r17, 0x03	; 3
 5fe:	18 83       	st	Y, r17
 600:	89 83       	std	Y+1, r24	; 0x01
 602:	1a 82       	std	Y+2, r1	; 0x02
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	59 df       	rcall	.-334    	; 0x4ba <usbReportSend>
 608:	18 83       	st	Y, r17
 60a:	19 82       	std	Y+1, r1	; 0x01
 60c:	1a 82       	std	Y+2, r1	; 0x02
 60e:	83 e0       	ldi	r24, 0x03	; 3
 610:	54 df       	rcall	.-344    	; 0x4ba <usbReportSend>
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	1f 91       	pop	r17
 618:	08 95       	ret

0000061a <main>:

/* ------------------------------------------------------------------------- */
int   main(void)
{
	uchar key=0, lastKey = 0;
	usbBegin();
 61a:	3d df       	rcall	.-390    	; 0x496 <usbBegin>
	pullUpOff(ROW2);//Low
}

static void hardwareInit(void)
{
	TCCR0 = 5;      /* timer 0 prescaler: 1024 */
 61c:	85 e0       	ldi	r24, 0x05	; 5
 61e:	83 bf       	out	0x33, r24	; 51
	
	//Led
	pinOUT(LED1);
 620:	a0 9a       	sbi	0x14, 0	; 20
	pinOUT(LED2);
 622:	a1 9a       	sbi	0x14, 1	; 20
	set_low(LED1);
 624:	a8 98       	cbi	0x15, 0	; 21
	set_low(LED2);
 626:	a9 98       	cbi	0x15, 1	; 21
	
	resetMatrix();
 628:	29 df       	rcall	.-430    	; 0x47c <resetMatrix>
}

/* ------------------------------------------------------------------------- */
int   main(void)
{
	uchar key=0, lastKey = 0;
 62a:	d0 e0       	ldi	r29, 0x00	; 0
	pinIN(COL4);
	pullUpOn(COL4);
	_delay_ms(1);
	
	if (is_low(COL1)) {
		return 6;
 62c:	0f 2e       	mov	r0, r31
 62e:	f6 e0       	ldi	r31, 0x06	; 6
 630:	ef 2e       	mov	r14, r31
 632:	f0 2d       	mov	r31, r0
	}
	if (is_low(COL2)) {
		return 7;
 634:	0f 2e       	mov	r0, r31
 636:	f7 e0       	ldi	r31, 0x07	; 7
 638:	df 2e       	mov	r13, r31
 63a:	f0 2d       	mov	r31, r0
	}
	if (is_low(COL3)) {
		return 1;
 63c:	bb 24       	eor	r11, r11
 63e:	b3 94       	inc	r11
	}
	if (is_low(COL4)) {
		return 8;
 640:	68 94       	set
 642:	cc 24       	eor	r12, r12
 644:	c3 f8       	bld	r12, 3
	pinIN(COL4);
	pullUpOn(COL4);
	_delay_ms(1);
	
	if (is_low(COL1)) {
		return 2;
 646:	68 94       	set
 648:	77 24       	eor	r7, r7
 64a:	71 f8       	bld	r7, 1
	}
	if (is_low(COL2)) {
		return 5;
 64c:	0f 2e       	mov	r0, r31
 64e:	f5 e0       	ldi	r31, 0x05	; 5
 650:	8f 2e       	mov	r8, r31
 652:	f0 2d       	mov	r31, r0
	}
	if (is_low(COL3)) {
		return 4; //3
 654:	68 94       	set
 656:	99 24       	eor	r9, r9
 658:	92 f8       	bld	r9, 2
	}
	if (is_low(COL4)) {
		return 3; //4
 65a:	0f 2e       	mov	r0, r31
 65c:	f3 e0       	ldi	r31, 0x03	; 3
 65e:	af 2e       	mov	r10, r31
 660:	f0 2d       	mov	r31, r0
	}
	
	resetMatrix();
	return 0;
 662:	f1 2c       	mov	r15, r1
	
	if (is_low(COL1) && is_low(COL3)) {
		return 10;
	}
	if (is_low(COL1) && is_low(COL4)) {
		return 9;
 664:	19 e0       	ldi	r17, 0x09	; 9
	pinIN(COL4);
	pullUpOn(COL4);
	_delay_ms(1);
	
	if (is_low(COL1) && is_low(COL3)) {
		return 10;
 666:	0a e0       	ldi	r16, 0x0A	; 10
}

static uchar getKey(void)
{
	//Volume Keys
	resetMatrix();
 668:	09 df       	rcall	.-494    	; 0x47c <resetMatrix>
	pinOUT(ROW1);
 66a:	88 9a       	sbi	0x11, 0	; 17
	set_high(ROW1);
 66c:	90 9a       	sbi	0x12, 0	; 18
	pinOUT(ROW2);
 66e:	89 9a       	sbi	0x11, 1	; 17
	set_low(ROW2);
 670:	91 98       	cbi	0x12, 1	; 18

	pinIN(COL1);
 672:	a2 98       	cbi	0x14, 2	; 20
	pullUpOn(COL1);
 674:	aa 9a       	sbi	0x15, 2	; 21
	pinIN(COL3);
 676:	a4 98       	cbi	0x14, 4	; 20
	pullUpOn(COL3);
 678:	ac 9a       	sbi	0x15, 4	; 21
	pinIN(COL4);
 67a:	a5 98       	cbi	0x14, 5	; 20
	pullUpOn(COL4);
 67c:	ad 9a       	sbi	0x15, 5	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67e:	87 eb       	ldi	r24, 0xB7	; 183
 680:	9b e0       	ldi	r25, 0x0B	; 11
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <main+0x68>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x6e>
 688:	00 00       	nop
	_delay_ms(1);
	
	if (is_low(COL1) && is_low(COL3)) {
 68a:	9a 99       	sbic	0x13, 2	; 19
 68c:	02 c0       	rjmp	.+4      	; 0x692 <main+0x78>
 68e:	9c 9b       	sbis	0x13, 4	; 19
 690:	3d c0       	rjmp	.+122    	; 0x70c <main+0xf2>
		return 10;
	}
	if (is_low(COL1) && is_low(COL4)) {
 692:	9a 99       	sbic	0x13, 2	; 19
 694:	02 c0       	rjmp	.+4      	; 0x69a <main+0x80>
 696:	9d 9b       	sbis	0x13, 5	; 19
 698:	3b c0       	rjmp	.+118    	; 0x710 <main+0xf6>
		return 9;
	}
	
	//ROW1 & COLS
	resetMatrix();
 69a:	f0 de       	rcall	.-544    	; 0x47c <resetMatrix>
	pinOUT(ROW1);
 69c:	88 9a       	sbi	0x11, 0	; 17
	set_low(ROW1);
 69e:	90 98       	cbi	0x12, 0	; 18
	pinOUT(ROW2);
 6a0:	89 9a       	sbi	0x11, 1	; 17
	set_high(ROW2);
 6a2:	91 9a       	sbi	0x12, 1	; 18
	
	pinIN(COL1);
 6a4:	a2 98       	cbi	0x14, 2	; 20
	pullUpOn(COL1);
 6a6:	aa 9a       	sbi	0x15, 2	; 21
	pinIN(COL2);
 6a8:	a3 98       	cbi	0x14, 3	; 20
	pullUpOn(COL2);
 6aa:	ab 9a       	sbi	0x15, 3	; 21
	pinIN(COL3);
 6ac:	a4 98       	cbi	0x14, 4	; 20
	pullUpOn(COL3);
 6ae:	ac 9a       	sbi	0x15, 4	; 21
	pinIN(COL4);
 6b0:	a5 98       	cbi	0x14, 5	; 20
	pullUpOn(COL4);
 6b2:	ad 9a       	sbi	0x15, 5	; 21
 6b4:	87 eb       	ldi	r24, 0xB7	; 183
 6b6:	9b e0       	ldi	r25, 0x0B	; 11
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <main+0x9e>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0xa4>
 6be:	00 00       	nop
	_delay_ms(1);
	
	if (is_low(COL1)) {
 6c0:	9a 9b       	sbis	0x13, 2	; 19
 6c2:	28 c0       	rjmp	.+80     	; 0x714 <main+0xfa>
		return 6;
	}
	if (is_low(COL2)) {
 6c4:	9b 9b       	sbis	0x13, 3	; 19
 6c6:	28 c0       	rjmp	.+80     	; 0x718 <main+0xfe>
		return 7;
	}
	if (is_low(COL3)) {
 6c8:	9c 9b       	sbis	0x13, 4	; 19
 6ca:	28 c0       	rjmp	.+80     	; 0x71c <main+0x102>
		return 1;
	}
	if (is_low(COL4)) {
 6cc:	9d 9b       	sbis	0x13, 5	; 19
 6ce:	28 c0       	rjmp	.+80     	; 0x720 <main+0x106>
		return 8;
	}
	
	//ROW2 & COLS
	resetMatrix();
 6d0:	d5 de       	rcall	.-598    	; 0x47c <resetMatrix>
	pinOUT(ROW1);
 6d2:	88 9a       	sbi	0x11, 0	; 17
	set_high(ROW1);
 6d4:	90 9a       	sbi	0x12, 0	; 18
	pinOUT(ROW2);
 6d6:	89 9a       	sbi	0x11, 1	; 17
	set_low(ROW2);
 6d8:	91 98       	cbi	0x12, 1	; 18

	pinIN(COL1);
 6da:	a2 98       	cbi	0x14, 2	; 20
	pullUpOn(COL1);
 6dc:	aa 9a       	sbi	0x15, 2	; 21
	pinIN(COL2);
 6de:	a3 98       	cbi	0x14, 3	; 20
	pullUpOn(COL2);
 6e0:	ab 9a       	sbi	0x15, 3	; 21
	pinIN(COL3);
 6e2:	a4 98       	cbi	0x14, 4	; 20
	pullUpOn(COL3);
 6e4:	ac 9a       	sbi	0x15, 4	; 21
	pinIN(COL4);
 6e6:	a5 98       	cbi	0x14, 5	; 20
	pullUpOn(COL4);
 6e8:	ad 9a       	sbi	0x15, 5	; 21
 6ea:	87 eb       	ldi	r24, 0xB7	; 183
 6ec:	9b e0       	ldi	r25, 0x0B	; 11
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <main+0xd4>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <main+0xda>
 6f4:	00 00       	nop
	_delay_ms(1);
	
	if (is_low(COL1)) {
 6f6:	9a 9b       	sbis	0x13, 2	; 19
 6f8:	15 c0       	rjmp	.+42     	; 0x724 <main+0x10a>
		return 2;
	}
	if (is_low(COL2)) {
 6fa:	9b 9b       	sbis	0x13, 3	; 19
 6fc:	15 c0       	rjmp	.+42     	; 0x728 <main+0x10e>
		return 5;
	}
	if (is_low(COL3)) {
 6fe:	9c 9b       	sbis	0x13, 4	; 19
 700:	15 c0       	rjmp	.+42     	; 0x72c <main+0x112>
		return 4; //3
	}
	if (is_low(COL4)) {
 702:	9d 9b       	sbis	0x13, 5	; 19
 704:	15 c0       	rjmp	.+42     	; 0x730 <main+0x116>
		return 3; //4
	}
	
	resetMatrix();
 706:	ba de       	rcall	.-652    	; 0x47c <resetMatrix>
	return 0;
 708:	cf 2d       	mov	r28, r15
 70a:	13 c0       	rjmp	.+38     	; 0x732 <main+0x118>
	pinIN(COL4);
	pullUpOn(COL4);
	_delay_ms(1);
	
	if (is_low(COL1) && is_low(COL3)) {
		return 10;
 70c:	c0 2f       	mov	r28, r16
 70e:	11 c0       	rjmp	.+34     	; 0x732 <main+0x118>
	}
	if (is_low(COL1) && is_low(COL4)) {
		return 9;
 710:	c1 2f       	mov	r28, r17
 712:	0f c0       	rjmp	.+30     	; 0x732 <main+0x118>
	pinIN(COL4);
	pullUpOn(COL4);
	_delay_ms(1);
	
	if (is_low(COL1)) {
		return 6;
 714:	ce 2d       	mov	r28, r14
 716:	0d c0       	rjmp	.+26     	; 0x732 <main+0x118>
	}
	if (is_low(COL2)) {
		return 7;
 718:	cd 2d       	mov	r28, r13
 71a:	0b c0       	rjmp	.+22     	; 0x732 <main+0x118>
	}
	if (is_low(COL3)) {
		return 1;
 71c:	cb 2d       	mov	r28, r11
 71e:	09 c0       	rjmp	.+18     	; 0x732 <main+0x118>
	}
	if (is_low(COL4)) {
		return 8;
 720:	cc 2d       	mov	r28, r12
 722:	07 c0       	rjmp	.+14     	; 0x732 <main+0x118>
	pinIN(COL4);
	pullUpOn(COL4);
	_delay_ms(1);
	
	if (is_low(COL1)) {
		return 2;
 724:	c7 2d       	mov	r28, r7
 726:	05 c0       	rjmp	.+10     	; 0x732 <main+0x118>
	}
	if (is_low(COL2)) {
		return 5;
 728:	c8 2d       	mov	r28, r8
 72a:	03 c0       	rjmp	.+6      	; 0x732 <main+0x118>
	}
	if (is_low(COL3)) {
		return 4; //3
 72c:	c9 2d       	mov	r28, r9
 72e:	01 c0       	rjmp	.+2      	; 0x732 <main+0x118>
	}
	if (is_low(COL4)) {
		return 3; //4
 730:	ca 2d       	mov	r28, r10
	
	while (1){/* main event loop */
		lastKey=key;
		key = getKey();
		
		if(isConnected()){
 732:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <usb_hasCommed>
 736:	88 23       	and	r24, r24
 738:	c9 f1       	breq	.+114    	; 0x7ac <main+0x192>
			if(key!=lastKey){
 73a:	dc 17       	cp	r29, r28
 73c:	a9 f1       	breq	.+106    	; 0x7a8 <main+0x18e>
				switch(key){
 73e:	8c 2f       	mov	r24, r28
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	8c 30       	cpi	r24, 0x0C	; 12
 744:	91 05       	cpc	r25, r1
 746:	80 f5       	brcc	.+96     	; 0x7a8 <main+0x18e>
 748:	fc 01       	movw	r30, r24
 74a:	ed 5e       	subi	r30, 0xED	; 237
 74c:	ff 4f       	sbci	r31, 0xFF	; 255
 74e:	09 94       	ijmp
					case 0:
					pressKey1(0, 0);
 750:	6f 2d       	mov	r22, r15
 752:	8f 2d       	mov	r24, r15
 754:	44 df       	rcall	.-376    	; 0x5de <pressKey1>
					break;
 756:	28 c0       	rjmp	.+80     	; 0x7a8 <main+0x18e>
					case 1:
					pressKey1(0, KEYCODE_F);
 758:	61 2f       	mov	r22, r17
 75a:	8f 2d       	mov	r24, r15
 75c:	40 df       	rcall	.-384    	; 0x5de <pressKey1>
					break;
 75e:	24 c0       	rjmp	.+72     	; 0x7a8 <main+0x18e>
					case 2:
					pressKey1(0, KEYCODE_ARROW_DOWN);
 760:	61 e5       	ldi	r22, 0x51	; 81
 762:	8f 2d       	mov	r24, r15
 764:	3c df       	rcall	.-392    	; 0x5de <pressKey1>
					break;
 766:	20 c0       	rjmp	.+64     	; 0x7a8 <main+0x18e>
					case 3:
					pressKey1(0, KEYCODE_KPminus);
 768:	66 e5       	ldi	r22, 0x56	; 86
 76a:	8f 2d       	mov	r24, r15
 76c:	38 df       	rcall	.-400    	; 0x5de <pressKey1>
					break;
 76e:	1c c0       	rjmp	.+56     	; 0x7a8 <main+0x18e>
					case 4:
					pressKey1(0, KEYCODE_KPplus);
 770:	67 e5       	ldi	r22, 0x57	; 87
 772:	8f 2d       	mov	r24, r15
 774:	34 df       	rcall	.-408    	; 0x5de <pressKey1>
					break;
 776:	18 c0       	rjmp	.+48     	; 0x7a8 <main+0x18e>
					case 5:
					pressKey1(0, KEYCODE_ARROW_RIGHT);
 778:	6f e4       	ldi	r22, 0x4F	; 79
 77a:	8f 2d       	mov	r24, r15
 77c:	30 df       	rcall	.-416    	; 0x5de <pressKey1>
					break;
 77e:	14 c0       	rjmp	.+40     	; 0x7a8 <main+0x18e>
					case 6:
					pressKey1(0, KEYCODE_ARROW_LEFT);
 780:	60 e5       	ldi	r22, 0x50	; 80
 782:	8f 2d       	mov	r24, r15
 784:	2c df       	rcall	.-424    	; 0x5de <pressKey1>
					break;
 786:	10 c0       	rjmp	.+32     	; 0x7a8 <main+0x18e>
					case 7:
					pressKey1(0, KEYCODE_ARROW_UP);
 788:	62 e5       	ldi	r22, 0x52	; 82
 78a:	8f 2d       	mov	r24, r15
 78c:	28 df       	rcall	.-432    	; 0x5de <pressKey1>
					break;
 78e:	0c c0       	rjmp	.+24     	; 0x7a8 <main+0x18e>
					case 8:
					pressKey1(0, KEYCODE_F5);
 790:	6e e3       	ldi	r22, 0x3E	; 62
 792:	8f 2d       	mov	r24, r15
 794:	24 df       	rcall	.-440    	; 0x5de <pressKey1>
					break;
 796:	08 c0       	rjmp	.+16     	; 0x7a8 <main+0x18e>
					case 9:
					pressMultimediaKey(MMKEY_VOL_DOWN);
 798:	8a ee       	ldi	r24, 0xEA	; 234
 79a:	2b df       	rcall	.-426    	; 0x5f2 <pressMultimediaKey>
					break;
 79c:	05 c0       	rjmp	.+10     	; 0x7a8 <main+0x18e>
					case 10:
					pressMultimediaKey(MMKEY_VOL_UP);
 79e:	89 ee       	ldi	r24, 0xE9	; 233
 7a0:	28 df       	rcall	.-432    	; 0x5f2 <pressMultimediaKey>
					break;
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <main+0x18e>
					case 11:
					pressMultimediaKey(MMKEY_MUTE);
 7a4:	82 ee       	ldi	r24, 0xE2	; 226
 7a6:	25 df       	rcall	.-438    	; 0x5f2 <pressMultimediaKey>
					break;
				}
			}			
			set_high(LED1);
 7a8:	a8 9a       	sbi	0x15, 0	; 21
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <main+0x194>
		}
		else{
			set_low(LED1);
 7ac:	a8 98       	cbi	0x15, 0	; 21
		}
		
		if (key!=0){
 7ae:	cc 23       	and	r28, r28
 7b0:	11 f0       	breq	.+4      	; 0x7b6 <main+0x19c>
			set_high(LED2);
 7b2:	a9 9a       	sbi	0x15, 1	; 21
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <main+0x19e>
		}
		else{
			set_low(LED2);
 7b6:	a9 98       	cbi	0x15, 1	; 21
		}		
		
		usbPoll(); // this needs to be called at least once every 10 ms
 7b8:	25 d0       	rcall	.+74     	; 0x804 <usbPoll>
	usbBegin();
	hardwareInit();
	
	while (1){/* main event loop */
		lastKey=key;
		key = getKey();
 7ba:	dc 2f       	mov	r29, r28
		else{
			set_low(LED2);
		}		
		
		usbPoll(); // this needs to be called at least once every 10 ms
	}
 7bc:	55 cf       	rjmp	.-342    	; 0x668 <main+0x4e>

000007be <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 7be:	cf 93       	push	r28
 7c0:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 7c2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <usbTxStatus1>
 7c6:	24 ff       	sbrs	r18, 4
 7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 7ca:	e9 e7       	ldi	r30, 0x79	; 121
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	31 81       	ldd	r19, Z+1	; 0x01
 7d0:	28 e8       	ldi	r18, 0x88	; 136
 7d2:	23 27       	eor	r18, r19
 7d4:	21 83       	std	Z+1, r18	; 0x01
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 7d8:	2a e5       	ldi	r18, 0x5A	; 90
 7da:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <usbTxStatus1>
    }
    p = txStatus->buffer + 1;
    i = len;
 7de:	2c 2f       	mov	r18, r28
 7e0:	e8 2f       	mov	r30, r24
 7e2:	f9 2f       	mov	r31, r25
 7e4:	ab e7       	ldi	r26, 0x7B	; 123
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 7e8:	81 91       	ld	r24, Z+
 7ea:	8d 93       	st	X+, r24
 7ec:	21 50       	subi	r18, 0x01	; 1
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 7ee:	12 16       	cp	r1, r18
 7f0:	dc f3       	brlt	.-10     	; 0x7e8 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 7f2:	6c 2f       	mov	r22, r28
 7f4:	8b e7       	ldi	r24, 0x7B	; 123
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	03 dd       	rcall	.-1530   	; 0x200 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 7fa:	cc 5f       	subi	r28, 0xFC	; 252
 7fc:	c0 93 79 00 	sts	0x0079, r28	; 0x800079 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 808:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <usbRxLen>
 80c:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 80e:	0a f4       	brpl	.+2      	; 0x812 <usbPoll+0xe>
 810:	be c0       	rjmp	.+380    	; 0x98e <usbPoll+0x18a>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 812:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <usbRxToken>
 816:	9d 32       	cpi	r25, 0x2D	; 45
 818:	09 f0       	breq	.+2      	; 0x81c <usbPoll+0x18>
 81a:	b7 c0       	rjmp	.+366    	; 0x98a <usbPoll+0x186>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 81c:	88 30       	cpi	r24, 0x08	; 8
 81e:	09 f0       	breq	.+2      	; 0x822 <usbPoll+0x1e>
 820:	b4 c0       	rjmp	.+360    	; 0x98a <usbPoll+0x186>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 822:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <usbInputBufOffset>
 826:	cc e0       	ldi	r28, 0x0C	; 12
 828:	d0 e0       	ldi	r29, 0x00	; 0
 82a:	c8 1b       	sub	r28, r24
 82c:	d1 09       	sbc	r29, r1
 82e:	c1 57       	subi	r28, 0x71	; 113
 830:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 832:	83 ec       	ldi	r24, 0xC3	; 195
 834:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 838:	8a e5       	ldi	r24, 0x5A	; 90
 83a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbTxLen>
        usbMsgFlags = 0;
 83e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 842:	88 81       	ld	r24, Y
 844:	80 76       	andi	r24, 0x60	; 96
 846:	19 f0       	breq	.+6      	; 0x84e <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 848:	ce 01       	movw	r24, r28
 84a:	49 de       	rcall	.-878    	; 0x4de <usbFunctionSetup>
 84c:	95 c0       	rjmp	.+298    	; 0x978 <usbPoll+0x174>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 84e:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 850:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 854:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 856:	81 11       	cpse	r24, r1
 858:	06 c0       	rjmp	.+12     	; 0x866 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 85a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 85e:	27 e7       	ldi	r18, 0x77	; 119
 860:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	85 c0       	rjmp	.+266    	; 0x970 <usbPoll+0x16c>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 866:	85 30       	cpi	r24, 0x05	; 5
 868:	31 f4       	brne	.+12     	; 0x876 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 86a:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 86e:	27 e7       	ldi	r18, 0x77	; 119
 870:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	7d c0       	rjmp	.+250    	; 0x970 <usbPoll+0x16c>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 876:	86 30       	cpi	r24, 0x06	; 6
 878:	09 f0       	breq	.+2      	; 0x87c <usbPoll+0x78>
 87a:	5a c0       	rjmp	.+180    	; 0x930 <usbPoll+0x12c>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 87c:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 87e:	81 30       	cpi	r24, 0x01	; 1
 880:	41 f4       	brne	.+16     	; 0x892 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 882:	8d e0       	ldi	r24, 0x0D	; 13
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 88a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 88e:	82 e1       	ldi	r24, 0x12	; 18
 890:	4b c0       	rjmp	.+150    	; 0x928 <usbPoll+0x124>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	41 f4       	brne	.+16     	; 0x8a6 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 896:	8b ee       	ldi	r24, 0xEB	; 235
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 89e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 8a2:	82 e2       	ldi	r24, 0x22	; 34
 8a4:	41 c0       	rjmp	.+130    	; 0x928 <usbPoll+0x124>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 8a6:	83 30       	cpi	r24, 0x03	; 3
 8a8:	41 f5       	brne	.+80     	; 0x8fa <usbPoll+0xf6>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 8aa:	91 11       	cpse	r25, r1
 8ac:	08 c0       	rjmp	.+16     	; 0x8be <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 8ae:	89 e9       	ldi	r24, 0x99	; 153
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 8b6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 8ba:	84 e0       	ldi	r24, 0x04	; 4
 8bc:	35 c0       	rjmp	.+106    	; 0x928 <usbPoll+0x124>
        SWITCH_CASE(1)
 8be:	91 30       	cpi	r25, 0x01	; 1
 8c0:	41 f4       	brne	.+16     	; 0x8d2 <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 8c2:	8f e5       	ldi	r24, 0x5F	; 95
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 8ca:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 8ce:	8a e3       	ldi	r24, 0x3A	; 58
 8d0:	2b c0       	rjmp	.+86     	; 0x928 <usbPoll+0x124>
        SWITCH_CASE(2)
 8d2:	92 30       	cpi	r25, 0x02	; 2
 8d4:	41 f4       	brne	.+16     	; 0x8e6 <usbPoll+0xe2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 8d6:	85 e2       	ldi	r24, 0x25	; 37
 8d8:	91 e0       	ldi	r25, 0x01	; 1
 8da:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 8de:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 8e2:	8a e3       	ldi	r24, 0x3A	; 58
 8e4:	21 c0       	rjmp	.+66     	; 0x928 <usbPoll+0x124>
        SWITCH_CASE(3)
 8e6:	93 30       	cpi	r25, 0x03	; 3
 8e8:	e1 f4       	brne	.+56     	; 0x922 <usbPoll+0x11e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
 8ea:	8f e1       	ldi	r24, 0x1F	; 31
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 8f2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 8f6:	86 e0       	ldi	r24, 0x06	; 6
 8f8:	17 c0       	rjmp	.+46     	; 0x928 <usbPoll+0x124>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 8fa:	81 32       	cpi	r24, 0x21	; 33
 8fc:	41 f4       	brne	.+16     	; 0x90e <usbPoll+0x10a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 8fe:	8d ef       	ldi	r24, 0xFD	; 253
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 906:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 90a:	89 e0       	ldi	r24, 0x09	; 9
 90c:	0d c0       	rjmp	.+26     	; 0x928 <usbPoll+0x124>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 90e:	82 32       	cpi	r24, 0x22	; 34
 910:	51 f4       	brne	.+20     	; 0x926 <usbPoll+0x122>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 912:	8e e3       	ldi	r24, 0x3E	; 62
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbMsgPtr+0x1>
 91a:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbMsgPtr>
 91e:	8d ea       	ldi	r24, 0xAD	; 173
 920:	03 c0       	rjmp	.+6      	; 0x928 <usbPoll+0x124>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	01 c0       	rjmp	.+2      	; 0x928 <usbPoll+0x124>
 926:	80 e0       	ldi	r24, 0x00	; 0
                flags = 0;
            }
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 928:	90 e4       	ldi	r25, 0x40	; 64
 92a:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgFlags>
 92e:	24 c0       	rjmp	.+72     	; 0x978 <usbPoll+0x174>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 930:	88 30       	cpi	r24, 0x08	; 8
 932:	99 f0       	breq	.+38     	; 0x95a <usbPoll+0x156>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 934:	89 30       	cpi	r24, 0x09	; 9
 936:	31 f4       	brne	.+12     	; 0x944 <usbPoll+0x140>
        usbConfiguration = value;
 938:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 93c:	27 e7       	ldi	r18, 0x77	; 119
 93e:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	16 c0       	rjmp	.+44     	; 0x970 <usbPoll+0x16c>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 944:	8a 30       	cpi	r24, 0x0A	; 10
 946:	69 f0       	breq	.+26     	; 0x962 <usbPoll+0x15e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 948:	8b 30       	cpi	r24, 0x0B	; 11
 94a:	79 f4       	brne	.+30     	; 0x96a <usbPoll+0x166>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 94c:	8b e4       	ldi	r24, 0x4B	; 75
 94e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 952:	27 e7       	ldi	r18, 0x77	; 119
 954:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	0b c0       	rjmp	.+22     	; 0x970 <usbPoll+0x16c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 95a:	2e e8       	ldi	r18, 0x8E	; 142
 95c:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	07 c0       	rjmp	.+14     	; 0x970 <usbPoll+0x16c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 962:	27 e7       	ldi	r18, 0x77	; 119
 964:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	03 c0       	rjmp	.+6      	; 0x970 <usbPoll+0x16c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 96a:	27 e7       	ldi	r18, 0x77	; 119
 96c:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 96e:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 970:	30 93 8a 00 	sts	0x008A, r19	; 0x80008a <usbMsgPtr+0x1>
 974:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 978:	9f 81       	ldd	r25, Y+7	; 0x07
 97a:	91 11       	cpse	r25, r1
 97c:	04 c0       	rjmp	.+8      	; 0x986 <usbPoll+0x182>
 97e:	9e 81       	ldd	r25, Y+6	; 0x06
 980:	98 17       	cp	r25, r24
 982:	08 f4       	brcc	.+2      	; 0x986 <usbPoll+0x182>
 984:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 986:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 98a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 98e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <usbTxLen>
 992:	84 ff       	sbrs	r24, 4
 994:	4b c0       	rjmp	.+150    	; 0xa2c <usbPoll+0x228>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 996:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbMsgLen>
 99a:	8f 3f       	cpi	r24, 0xFF	; 255
 99c:	09 f4       	brne	.+2      	; 0x9a0 <usbPoll+0x19c>
 99e:	46 c0       	rjmp	.+140    	; 0xa2c <usbPoll+0x228>
 9a0:	c8 2f       	mov	r28, r24
 9a2:	89 30       	cpi	r24, 0x09	; 9
 9a4:	08 f0       	brcs	.+2      	; 0x9a8 <usbPoll+0x1a4>
 9a6:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 9a8:	8c 1b       	sub	r24, r28
 9aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 9ae:	ee e6       	ldi	r30, 0x6E	; 110
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	90 81       	ld	r25, Z
 9b4:	88 e8       	ldi	r24, 0x88	; 136
 9b6:	89 27       	eor	r24, r25
 9b8:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 9ba:	cc 23       	and	r28, r28
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <usbPoll+0x1bc>
 9be:	44 c0       	rjmp	.+136    	; 0xa48 <usbPoll+0x244>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 9c0:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <usbMsgPtr>
 9c4:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 9c8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <usbMsgFlags>
 9cc:	86 ff       	sbrs	r24, 6
 9ce:	10 c0       	rjmp	.+32     	; 0x9f0 <usbPoll+0x1ec>
 9d0:	af e6       	ldi	r26, 0x6F	; 111
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	f9 01       	movw	r30, r18
 9d6:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 9d8:	94 91       	lpm	r25, Z
                    *data++ = c;
 9da:	9d 93       	st	X+, r25
                    r++;
 9dc:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 9de:	81 50       	subi	r24, 0x01	; 1
 9e0:	d9 f7       	brne	.-10     	; 0x9d8 <usbPoll+0x1d4>
 9e2:	8f ef       	ldi	r24, 0xFF	; 255
 9e4:	8c 0f       	add	r24, r28
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	01 96       	adiw	r24, 0x01	; 1
 9ea:	28 0f       	add	r18, r24
 9ec:	39 1f       	adc	r19, r25
 9ee:	0e c0       	rjmp	.+28     	; 0xa0c <usbPoll+0x208>
 9f0:	d9 01       	movw	r26, r18
 9f2:	ef e6       	ldi	r30, 0x6F	; 111
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 9f6:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 9f8:	9d 91       	ld	r25, X+
 9fa:	91 93       	st	Z+, r25
                    r++;
                }while(--i);
 9fc:	81 50       	subi	r24, 0x01	; 1
 9fe:	e1 f7       	brne	.-8      	; 0x9f8 <usbPoll+0x1f4>
 a00:	8f ef       	ldi	r24, 0xFF	; 255
 a02:	8c 0f       	add	r24, r28
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	28 0f       	add	r18, r24
 a0a:	39 1f       	adc	r19, r25
            }
            usbMsgPtr = r;
 a0c:	30 93 8a 00 	sts	0x008A, r19	; 0x80008a <usbMsgPtr+0x1>
 a10:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 a14:	6c 2f       	mov	r22, r28
 a16:	8f e6       	ldi	r24, 0x6F	; 111
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	f2 db       	rcall	.-2076   	; 0x200 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 a1c:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 a1e:	cc 30       	cpi	r28, 0x0C	; 12
 a20:	18 f4       	brcc	.+6      	; 0xa28 <usbPoll+0x224>
            usbMsgLen = USB_NO_MSG;
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 a28:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 a2c:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
 a2e:	83 70       	andi	r24, 0x03	; 3
 a30:	89 f4       	brne	.+34     	; 0xa54 <usbPoll+0x250>
 a32:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 a34:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
 a36:	83 70       	andi	r24, 0x03	; 3
 a38:	69 f4       	brne	.+26     	; 0xa54 <usbPoll+0x250>
 a3a:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 a3c:	d9 f7       	brne	.-10     	; 0xa34 <usbPoll+0x230>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 a3e:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 a42:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 a46:	06 c0       	rjmp	.+12     	; 0xa54 <usbPoll+0x250>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 a48:	6c 2f       	mov	r22, r28
 a4a:	8f e6       	ldi	r24, 0x6F	; 111
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	d8 db       	rcall	.-2128   	; 0x200 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 a50:	cc 5f       	subi	r28, 0xFC	; 252
 a52:	e7 cf       	rjmp	.-50     	; 0xa22 <usbPoll+0x21e>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	08 95       	ret

00000a5a <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 a5a:	85 b7       	in	r24, 0x35	; 53
 a5c:	83 60       	ori	r24, 0x03	; 3
 a5e:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 a60:	8b b7       	in	r24, 0x3b	; 59
 a62:	80 64       	ori	r24, 0x40	; 64
 a64:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 a66:	e9 e7       	ldi	r30, 0x79	; 121
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	8b e4       	ldi	r24, 0x4B	; 75
 a6c:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 a6e:	8a e5       	ldi	r24, 0x5A	; 90
 a70:	80 83       	st	Z, r24
 a72:	08 95       	ret

00000a74 <_exit>:
 a74:	f8 94       	cli

00000a76 <__stop_program>:
 a76:	ff cf       	rjmp	.-2      	; 0xa76 <__stop_program>
